import test from "tape";
import stream from "event-stream";
import { PassThrough } from "stream";
import File from "vinyl";
import { Generator } from "@jspm/generator";
import importmap from "./index.js";

const sample = `<doctype !html><script type="module">import "react"</script>`;

const expected = (html) => html.indexOf("Generated by @jspm/generator") >= 0;

const generator = new Generator({
  mapUrl: import.meta.url,
  env: ["production", "browser", "module"],
});

test("Buffer File", (assert) => {
  assert.plan(2);

  const bufferFile = new File({
    contents: Buffer.from(sample, "utf8"),
  });

  const plugin = importmap(generator);

  plugin.write(bufferFile);

  plugin.once("data", (file) => {
    assert.ok(file.isBuffer(), "File is still buffer");
    assert.ok(
      expected(file.contents.toString("utf8")),
      "Contents contain importmap"
    );
  });
});

test("Stream File", (assert) => {
  assert.plan(1);

  const fileStream = new PassThrough();
  const streamFile = new File({
    contents: fileStream,
  });
  fileStream.write(Buffer.from("foo"));
  fileStream.write(Buffer.from("bar"));
  fileStream.end();

  const plugin = importmap(generator);

  try {
    plugin.write(streamFile);
  } catch (err) {
    assert.equal(err.plugin, "gulp-jspm-generator", "Streams throw error");
  }
});

test("Null File", (assert) => {
  assert.plan(2);

  const fileName = "null.md";

  const nullFile = new File({
    path: fileName,
    contents: null,
  });

  const plugin = importmap(generator);

  plugin.write(nullFile);

  plugin.once("data", (file) => {
    assert.ok(file.isNull(), "File is still null");
    assert.equal(file.path, fileName, "File path is still the same");
  });
});
